Help on module minimalsite:

NAME
    minimalsite - A fast minimal static website builder.

FILE
    /home/lavish/repo/minimalsite/minimalsite.py

DESCRIPTION
    Minimalsite generates web pages from a source file hierarchy. It supports
    markdown and textile syntax, but plain txt and html can be evenly used.
    Template files are python modules, providing huge flexibilty and keeping the
    codebase tiny and simple.

CLASSES
    Page
    TreeNode
    
    class Page
     |  Meta informations of a page.
     |  
     |  Attributes:
     |  
     |      src_pathname    pathname of the source file 
     |      dst_pathname    pathname of the generated file
     |      src_file        file name of the source file
     |      dst_file        file name of the generated file
     |      name            file name of the generated file without extension
     |      level           depth level in the site hierarchy
     |      last_edit       time.struct_time date of source file last edit
     |  
     |  Methods defined here:
     |  
     |  __init__(self, src_pathname, level)
     |  
     |  __str__(self)
     |      Return a textual representation of the page.
    
    class TreeNode
     |  Node of the site hierarchy tree structure.
     |  
     |  Attributes:
     |  
     |      page        Page object
     |      parent      parent node, None if current node is the root
     |      children    list of children
     |  
     |  Methods defined here:
     |  
     |  __init__(self, page, parent=None)
     |  
     |  __str__(self)
     |      Return the entire tree structure.
     |  
     |  build(self)
     |      Create the site tree, representing the source file hierarchy.
     |  
     |  menu(self)
     |      Return the generated code for menu.
     |  
     |  path(self)
     |      Return the generated code for breadcrumb navigation path.
     |  
     |  title(self)
     |      Return the title for the current node.
     |  
     |  write(self, margin='')
     |      Write the generated site on the file system.
     |  
     |  write_sitemap(self)
     |      Write an XML sitemap to the file system.

FUNCTIONS
    check_template()
        Check mandatory variable/function definitions in the provided template.
    
    die(msg, code=1)
        Write an error message to stderr and exit.
    
    has_index(pathname)
        Check if there's an index file in the given directory pathname.
    
    import_template(pathname)
        Load the python module in the provided file name as a template.
    
    main()
        Main method.
    
    notice(msg)
        Write a notice message to stdout.
    
    syntax(pathname)
        Return the markup language used in the given pathname.

DATA
    __author__ = 'Marco Squarcina <lavish at gmail.com>'
    __copyright__ = 'Copyright 2012, Marco Squarcina'
    __license__ = 'MIT'
    __status__ = 'Development'
    __version__ = '0.99'

VERSION
    0.99

AUTHOR
    Marco Squarcina <lavish at gmail.com>


